# -*- coding: utf-8 -*-
"""saude_fetal_v2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1krNO1iEydcGvhKc8tpWjuFZmrqyXSHUs

# **Saúde Fetal**

**Autor**: Renan Santos Mendes

**Email**: renansantosmendes@gmail.com

**Descrição**: Este notebook apresenta um exemplo de modelo de aprendizado de máquina para um problema de classificação.


# **Saúde Fetal**

As Cardiotocografias (CTGs) são opções simples e de baixo custo para avaliar a saúde fetal, permitindo que os profissionais de saúde atuem na prevenção da mortalidade infantil e materna. O próprio equipamento funciona enviando pulsos de ultrassom e lendo sua resposta, lançando luz sobre a frequência cardíaca fetal (FCF), movimentos fetais, contrações uterinas e muito mais.

Este conjunto de dados contém 2126 registros de características extraídas de exames de Cardiotocografias, que foram então classificados por três obstetras especialistas em 3 classes:

- Normal
- Suspeito
- Patológico
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install -U mlflow -q

import os
import pickle
import mlflow
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

"""# 2 - Fazendo a leitura do dataset e atribuindo às respectivas variáveis"""

data = pd.read_csv('https://raw.githubusercontent.com/renansantosmendes/lectures-cdas-2023/master/fetal_health.csv')

data.head(10)

"""# 3 - Preparando o dado antes de iniciar o treino do modelo"""

features_to_remove = data.columns[7:]

features_to_remove

X=data.drop(features_to_remove, axis=1)
y=data["fetal_health"]

X

y

X.columns

scaler = preprocessing.StandardScaler()
X_df = scaler.fit_transform(X)
X_df = pd.DataFrame(X_df, columns=X.columns)

X_df.head()

X_train, X_test, y_train, y_test = train_test_split(X_df, y, random_state=42, test_size=0.3)

print(X_test.shape)
print(y_test.shape)

print(X_train.shape)
print(y_train.shape)

from mlflow import MlflowClient
###################################################################################
# Lembrem de atualizar as variáveis abaixo com os valores do seu usuário no dagshub
###################################################################################
MLFLOW_TRACKING_URI = ''
MLFLOW_TRACKING_USERNAME = ''
MLFLOW_TRACKING_PASSWORD = ''
os.environ['MLFLOW_TRACKING_USERNAME'] = MLFLOW_TRACKING_USERNAME
os.environ['MLFLOW_TRACKING_PASSWORD'] = MLFLOW_TRACKING_PASSWORD

mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)

mlflow.sklearn.autolog(log_models=True,
                       log_input_examples=True,
                       log_model_signatures=True)

"""# **Modelos Ensemble**"""

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score

# Commented out IPython magic to ensure Python compatibility.
# %%time
# grd_clf = GradientBoostingClassifier(max_depth=10,
#                                      n_estimators=350,
#                                      learning_rate=0.02)
# 
# 
# grd_clf.fit(X_train, y_train)
# y_pred = grd_clf.predict(X_train)
# accuracy_score(y_train, y_pred)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# grd_clf = GradientBoostingClassifier(max_depth=15,
#                                      n_estimators=320,
#                                      learning_rate=0.2)
# 
# with mlflow.start_run(run_name='gradiente_bosting') as run:
#   grd_clf.fit(X_train, y_train)



